ANGULAR:
---------
Components:
-------------
Components are essential part of angular we can create multiple components and component within components. Angular works best when there are multiple components then it will be easy to refresh dom.
Creating a component:(Manually)
*we have to have a file called "componentname.component.ts" 
*Then add import called Component in ts file
*create class and export it within that add variables
*@Component annotation is a "decorator" which has the metadata and mentions files used in that component
*for example selector "app-root" which used in the main index file
*Then templateUrls for specifying the html file
*Then Stylesurls for specifying css file
*finally adding it to the index.html (main) or within other components, to use within other components we should add it 
to that component imports
*Calling it by its selector name as a tag we can display that component

 Creating a component:(Using CLI)
 Command to generate compoentn using cli: ng generate component hello-world-2
 Command to generate compoentn using cli: ng g c hello-world-2
 A folder inside app folder with the component name will be created, with some basic configurations.

 Data Binding:
 One way binding - The data will pass only from component to view and not from view to components.
 We can also do One way binding by using property binding for example we have a component variable called title 
 it can be passed to a innerText by [innerText] = 'title'
 WE can also send data from view to component which is also a type of one way binding , it is called Event binding.
 Two way binding - The data will pass from component to view and vice versa.. changes made in view will reflect for component.
 for this we can test with FormsModule importing in the component and use [(ngModel)] = 'variable_name' in the component.

 String interpolation:
 {{variable_name}} mostly used for returning the component variable's text in the view. But it can also used for other purposes
 like evaluating a mathematical expression, executing function declared in component and can be used to express the variable value 
 as a property for example as a css property.

 Property binding:
 A html element is controlled or made changes in it by its properties like diabled, innerText and so on.
 so we can have component variables and plain Strings to it by following a syntax like  [innerText] = "title"
 title is a variable and for string. [innerText] ="'Welcome to Angular'"

 Event Binding:
 Event binding is done to make changes/ events for a property mostly used as function to change in view , function is created in
 the component. Syntax for event binding is (click)="clickme()",(input) and so on.
 for a Component value to be directly reflected in the view which is modified by an event as a function in the component
 in the html we have to follow a syntax like (input) = "handleInput($event)"
 this $event is important as it refers to the payload of that event in this case it is input.
 in that function in component we have to update
 handleInput(event:any){
    value = event.target.value
 }
 this code will help to get proper updation of value in the view of that mentioned 'value' variable.

 Directives:
 *Structural directives
 *ngFor typically used as a for loop. used in cases like to display a list of elements in a list tag:
 <li *ngFor = "let movie of movies" [innerText]="movie">li>
 *ngSwitchCase same as a switch case statement
<input type="text" [(ngModel)]="num" />
<div [ngSwitch]="num">
  <div *ngSwitchCase="'1'"><p>One</p></div>
  <div *ngSwitchCase="'2'">Two</div>
  <div *ngSwitchCase="'3'">Three</div>
</div>
*ngIf used for checking a condition and displaying according to it.
<label for="">Are you 18+<input type="checkbox" [(ngModel)]="allowed"></label>
<p *ngIf="allowed">Let him in</p>
<p *ngIf="!allowed">Hat BSDK!</p>
*ngIf with else block
in order to display the else block after the variable mentioned in *ngIf="allow; else else-block-name"
and create a ng-template tag and put #else-block-name in it
<p *ngIf="allowed; else elseBlock">Let him in</p>
<!-- <p *ngIf="!allowed">Hat BSDK!</p> -->
<ng-template #elseBlock>
    <!-- <p>Hat BSDK!</p> -->
    <p>Randi ke bache</p>
</ng-template>

Attribute directive:
[ngClass] this is mostly used to change the appearence and behavior of elements. Like apply specific style classes 
based on conditions
<div [ngClass] = {'primary':true,'big':false} like this or without conditions if we want to apply multiple 
style classes for a div 
<div [ngClass] = [primary,big,italics]

[ngStyle] is another attribute directive which is specifically used to make changes in design properties, it is also achievable
in ngClass but it needs multiple style classes. with ngStyle we can simply modify certain style properties.
<div [ngStyle] = "{
  'background-color':color,
  'width':'50px',
  'height':'50px'
}">

Pipes:
Pipes are used to display or represent a data in our site in a different manner for example there is a pipe called
date pipe, our Date object will give 22/11/2024 timezone and so on. So to make it 22 November we can use date pipe.
also we have uppercase pipe, lowecase pipe, slice pipe and so on. 

Sending data from parent to child component:
@Input()
Data sent from parent should reflect in child. for this process we have to use @Input() decorator in the child component
@Input('carsInput')
  cars:string[] = []
  here 'carsInput' is the binding name for that input value which values are stored in cars string array
cars:string[] = []
  car = ""
  onSubmit(){
    if(!this.cars.includes(this.car)){
      this.cars.push(this.car)
    }
    this.car=''
  }
  this code is from parent component which takes car value in input [(ngModel)] and pushes into cars string array
  using onSubmit method and also checks for duplication.
<app-list
[carsInput]="cars"></app-list>
here we are having carsInput in left which is the input receiver in the child component and in right cars which is the
string array gives the value to the carsInput input element which passes that value to cars in cho=ild component.

@Output()
To send data from a child to a parent we need to use @Output() decorator which should be in the child compoent which
is sending the data.
  @Output() outputEvent:EventEmitter<string> = new EventEmitter<string>;
This EventEmitter is responsible for sending/emitting data to parent component 
sendMessage(){
    if(this.cars.length > 5){
    this.outputEvent.emit("List is full..")
  }
}
to activate the output to be sent/emit we have condition here (in our case) outputEvent.emit emits a string message here.
value:string = ''
  receiveData(val:string){
    this.value=val
  }
  This code is from parent component which used for receiving data sent form child component and store in a variable
  <app-form (outputEvent)="receiveData($event)">
  the lhs outputEvent is from sender(child component) and lhs receiveData($event) is method from parent receiver.

  Component Lifecycle:
  ngOnChanges() //This ngOnChanges is an interface so after importing onChanges we need to add implements onChanges in class
when used in a component it keeps track of all the changes iccur in that component for example what variable gets changed
its previous and current values and so on.
ngOnChanges(changes: SimpleChanges): void {
    console.log(changes)
} 
  ngOnChanges will only note the changes that occur in a string, number not in arrays and objects.

  ngOnItnit() 
  This is also an interface similar to ngOnChanges this method is called whenever a component is created.
  This is used in cases like if a component is created it notifies the browser/user the components is created. with this method
  we can make things to happen at creation of a component.

  ngDoCheck()
  This resolve the issue with the ngOnChanges() which can't keep track of the array change or object change,
  ngDoCheck() keeps track of the very small changes like key press, mouse clicks and so on. like it keeps track of the all
  changes in angular component

Angular forms:
Forms are generally used to collect data for a specific purpose like login, store user input and make validations in it.
Angular we can make forms with 2 approaches, Template driven and Reactive forms.

Template driven
For implementing template driven forms we need something called ngForm, but whenever we have form in out template/html
this ngForm will automatically be assigned to it.
The complete form will treated as formGroupInstance and individual inputs and buttons are treated as form control instance.
To make each individual input element as form control we have to add ngModel in theose inputs to make  it as a form control
We can also keep formgroups within another formgroup and access it. for that we have to mention ngModelGroup in the inner formgroup


